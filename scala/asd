Format.xml

-<pattern>
-	<!-- PE93 DATOS CLIENTE -->
-	<fmtdef id="{}">
-		<bsvreq>
-			<header>
-				<usuario>${header.userName}</usuario>
-				<password>${header.userPassword}</password>
-				<canal>${header.channel}</canal>
-				<trxid>${header.trxId}</trxid>
-				<requerimiento>{req}</requerimiento>
-			</header>
-			<data>

-			</data>
-		</bsvreq>
-	</fmtdef>
-
-	<fmtdef id="{}">
-		<bsvrsp>
-			<header map="responseHeader" class="com.midd.bean.ResponseHeader">
-				<resultado>${responseHeader.result}</resultado>
-				<aviso>
-					<codigo>${responseHeader.warningCode}</codigo>
-					<mensaje>${responseHeader.warningMessage}</mensaje>
-				</aviso>
-				<error>
-					<codigo>${responseHeader.errorCode}</codigo>
-					<mensaje>${responseHeader.errorMessage}</mensaje>
-				</error>
-				<fecha>${responseHeader.date}</fecha>
-				<hora>${responseHeader.time}</hora>
-				<nombre>${responseHeader.instanceName}</nombre>
-			</header>
-			<data map="${responseData}" class="com.midd.bean.response.ClientData">

-			</data>
-		</bsvrsp>
-	</fmtdef>

-	
-</pattern>
-
-		*****************************************	
-utils.ts
-
-export class FormatXml {
-
-    public id: string;
-    public headerReq: string;
-    public headerResp: string;
-    public data: string;
-
-    constructor(public requerimiento: string){
-        this.headerReq = "<header>\n\t\t\t<usuario>${header.userName}</usuario>\n\t\t\t<password>${header.userPassword}</password>\n\t\t\t<canal>${header.channel}</canal>\n\t\t\t<trxid>${header.trxId}</trxid>\n\t\t\t<requerimiento>" + requerimiento + "</requerimiento>\n</header>\n";
-        this.headerResp = "<header map=\"responseHeader\" class=\"com.midd.bean.ResponseHeader\">\n\t<resultado>${responseHeader.result}</resultado>\n\t<aviso>\n\t\t<codigo>${responseHeader.warningCode}</codigo>\n\t\t<mensaje>${responseHeader.warningMessage}</mensaje>\n\t</aviso>\n\t<error>\n\t\t<codigo>${responseHeader.errorCode}</codigo>\n\t\t<mensaje>${responseHeader.errorMessage}</mensaje>\n\t</error>\n\t<fecha>${responseHeader.date}</fecha>\n\t<hora>${responseHeader.time}</hora>\n\t<nombre>${responseHeader.instanceName}</nombre>\n\t\t</header>\n";
-        this.data = "\t\t\t<data> ";
-    }
-
-    requestGenerator(): string{
-        let format: string = "<fmtdef id=" + this.id +">\n";
-        let bsv:string = "\t<bsvreq>\n\t\t" + this.headerReq;
-        let nuevoDato: boolean = false;
-        let campo:string;
-
-
-        while (nuevoDato) {
-            campo = this.dataGenerator("","");
-            this.data += campo;
-        }
-
-        bsv = bsv + this.data + "</data>\n\t</bsvreq>\n";
-        format = format + bsv + "</fmtdef>";
-        return format;
-    }
-
-    responseGenerator(): string{
-        return "";
-    }
-
-
-    dataGenerator(tag: string, nuevoCampo: string): string{
-        return "";
-    }
-}
-
-		*****************************************	
-script.ts
-import { FormatXml } from "./utils"
-
-function main(): void  {
-
-}
-
-main();
-
-
-let f: FormatXml = new FormatXml("datos_cliente");
-
-
-
-console.log(f.requestGenerator());
-//console.log(f.headerResp);
